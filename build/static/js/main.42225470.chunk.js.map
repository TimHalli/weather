{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","WEB","useState","termAPI","setTermAPI","API","setAPI","name","temp","fiveDays","day","defaultCity","setDefaultCity","term","setTerm","visibleItem","setVisibleItem","key","setKey","favorites","setFavorites","homeFlag","setHomeFlag","favFlag","setFavFlag","cls","setCls","autocompleteFlag","setAutocompleteFlag","addToFavorites","some","el","fav","useEffect","res","fetch","then","response","json","info","visible","searcher","filter","item","length","LocalizedName","toLowerCase","indexOf","Key","search","map","catch","err","Error","keyC","res2","dayName","c","week","arr","i","Date","DailyForecasts","getDay","Temperature","Maximum","Value","push","toFixed","renderWeather","home","className","onClick","e","type","scope","onChange","target","value","placeholder","id","style","maxWidth","display","index","copy","splice","deleteFav","favDetails","justifyContent","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.42225470.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nexport default function App() {\n  const WEB = \"http://dataservice.accuweather.com/\";\n  const locationApiUrl = () => `${WEB}locations/v1/topcities/150?apikey=${API}`;\n  const weatherApiUrl = (keyC) => `${WEB}forecasts/v1/daily/5day/${keyC}?apikey=${API}`;\n  const [termAPI, setTermAPI] = useState(\"XK2mHP5KGYO2SwOhzmtTB61e8yImb7DD\");\n  const [API, setAPI] = useState(termAPI);\n\n  const [defaultCity, setDefaultCity] = useState({\n    name: \"Tel Aviv\",\n    temp: 0,\n    fiveDays: [\n      {\n        day: \"\",\n        temp: 0,\n      },\n    ],\n  });\n\n  const [term, setTerm] = useState(\"\");\n  const [visibleItem, setVisibleItem] = useState(\"\");\n  const [key, setKey] = useState(215854);\n  const [favorites, setFavorites] = useState([]);\n\n  const [homeFlag, setHomeFlag] = useState(true);\n  const [favFlag, setFavFlag] = useState(false);\n\n  const [cls, setCls] = useState(\"table-primary\");\n  const [autocompleteFlag, setAutocompleteFlag] = useState(true);\n\n  const search = (info, term) => {\n    const searcher = info.filter((item) => {\n      if (term.length === 0) {\n        return info;\n      }\n      return item.LocalizedName.toLowerCase().indexOf(term.toLowerCase()) > -1;\n    });\n\n    let visible, key;\n\n    if (searcher.length === 0) {\n      visible = \"Tel Aviv\";\n      key = 215854;\n    } else {\n      visible = searcher[0].LocalizedName;\n      key = searcher[0].Key;\n    }\n    setVisibleItem(visible);\n    setKey(key);\n  };\n\n  const onSearch = (e) => {\n    setTerm(() => e.target.value);\n    setAutocompleteFlag(true);\n\n    const fav = (el) => el.name === defaultCity.name;\n\n    if (favorites.some((el) => fav(el))) {\n      setCls(\"table-active\");\n    } else {\n      setCls(\"table-primary\");\n    }\n  };\n\n  const addToFavorites = (defaultCity) => {\n    const fav = (el) => el === defaultCity;\n\n    if (favorites.some((el) => fav(el))) {\n      setFavorites(favorites);\n    } else {\n      setFavorites([...favorites, defaultCity]);\n      setCls(\"table-active\");\n    }\n  };\n\n  const renderWeather = (res) => {\n    const week = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    let date,\n      dayName,\n      dailyWeather,\n      c,\n      arr = [];\n\n    for (let i = 0; i < 5; i++) {\n      date = new Date(res.DailyForecasts[i].Date);\n\n      dayName = week[date.getDay()];\n\n      dailyWeather = res.DailyForecasts[i].Temperature;\n      c = ((dailyWeather.Maximum.Value - 32) * 5) / 9;\n\n      arr.push({ day: dayName, temp: c.toFixed() });\n    }\n\n    dailyWeather = res.DailyForecasts[0].Temperature;\n    c = ((dailyWeather.Maximum.Value - 32) * 5) / 9;\n\n    setDefaultCity({\n      ...defaultCity,\n      name: visibleItem,\n      temp: c.toFixed(),\n      fiveDays: arr,\n    });\n  };\n\n  useEffect(() => {\n    const res = fetch(locationApiUrl())\n      .then((response) => response.json())\n      .then((info) => {\n        search(info, term);\n        info.map((item) => {\n          if (item.LocalizedName === visibleItem) {\n            setDefaultCity({\n              ...defaultCity,\n              name: item.LocalizedName,\n            });\n          }\n        });\n      })\n      .catch((err) => {\n        throw new Error(\n          `Could not fetch: ${err}. The API you used has expired. You need to use the new API. You can do this at https://developer.accuweather.com/`\n        );\n      });\n    return () => res;\n  }, [term, term]);\n\n  useEffect(() => {\n    const res2 = fetch(weatherApiUrl(key))\n      .then((response) => response.json())\n      .then((res) => {\n        renderWeather(res);\n      })\n      .catch((err) => {\n        throw new Error(`Could not fetch: ${err}`);\n      });\n    return () => res2;\n  }, [term, key]);\n\n  const home = (\n    <div className='App'>\n      <div>\n        <br />\n        <br />\n\n        <div className='form-group'>\n          <button onClick={(e) => addToFavorites(defaultCity)} type='button' className='btn btn-success'>\n            Add To Favorites\n          </button>\n          <br />\n          <br />\n\n          {!autocompleteFlag ? null : visibleItem === \"Dhaka\" ? null : (\n            <table className={\"table table-hover\"}>\n              <tbody>\n                <tr className={cls}>\n                  <th scope='row'>\n                    <h1>{defaultCity.name}</h1>\n                  </th>\n                </tr>\n              </tbody>\n            </table>\n          )}\n          <input\n            onChange={onSearch}\n            className='form-control form-control-lg'\n            type='text'\n            placeholder='Search for a city...'\n            id='inputLarge'\n          />\n        </div>\n\n        <div className='card border-primary mb-3' style={{ maxWidth: \"20rem\" }}>\n          <div className='card-body'>\n            <h4 className='card-title'>{visibleItem === \"Dhaka\" ? \"Tel Aviv\" : visibleItem}</h4>\n            <p className='card-text'>{defaultCity.temp}C</p>\n          </div>\n        </div>\n\n        <h1>Scattered Clouds</h1>\n\n        <div style={{ display: \"flex\" }}>\n          {defaultCity.fiveDays.map((day, index) => (\n            <div key={index} className='card border-primary mb-3' style={{ maxWidth: \"20rem\" }}>\n              <div className='card-body'>\n                <h4 className='card-title'>{day.day}</h4>\n                <p className='card-text'>{day.temp}C</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  const deleteFav = (i) => {\n    const copy = [...favorites];\n    copy.splice(i, 1);\n\n    setFavorites(copy);\n  };\n\n  const favDetails = (item) => {\n    setHomeFlag(true);\n    setFavFlag(false);\n    setTerm(item.name);\n    setAutocompleteFlag(false);\n    setDefaultCity(item);\n    return item;\n  };\n\n  const fav = (\n    <div>\n      <h1>Favorites</h1>\n\n      <div style={{ display: \"flex\" }}>\n        {!favorites\n          ? null\n          : favorites.map((item, index) => {\n              return (\n                <div key={index + item.name}>\n                  <div style={{ display: \"flex\" }}>\n                    <div className='card border-success  mb-3' style={{ maxWidth: \"20rem\" }}>\n                      <div className='card-header'>\n                        <h1 onClick={() => deleteFav(index)}>&times;</h1>\n                      </div>\n                      <div onClick={() => favDetails(item)} className='card-body'>\n                        <h3 className='card-title'>{item.name}</h3>\n                        <h4 className='card-text'>{item.temp}C</h4>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n      </div>\n    </div>\n  );\n\n  const homeFunc = () => {\n    setHomeFlag(true);\n    setFavFlag(false);\n  };\n\n  const favFunc = () => {\n    setFavFlag(true);\n    setHomeFlag(false);\n  };\n\n  const insertAPI = () => {\n    setAPI(termAPI);\n  };\n\n  return (\n    <div className='App'>\n      <nav className='navbar navbar-expand-lg navbar-dark bg-primary'>\n        <div className='container-fluid'>\n          <div style={{ justifyContent: \"space-between\" }} className='collapse navbar-collapse' id='navbarColor01'>\n            <ul className='navbar-nav me-auto'>\n              <li className='nav-item'>\n                <h1 id='home' onClick={homeFunc} className='col-form-label col-form-label-lg mt-2 nav-link active'>\n                  Home\n                </h1>\n              </li>\n\n              <li className='nav-item'>\n                <h1 id='favorites' onClick={favFunc} className='col-form-label col-form-label-lg mt-2 nav-link '>\n                  Favorites\n                </h1>\n              </li>\n            </ul>\n            <tr className='table-warning mt-3'>\n              <th scope='row'>You need registration here -&gt; &nbsp;</th>\n              <td>\n                <a href='https://developer.accuweather.com/user/me/apps'>\n                  https://developer.accuweather.com/user/me/apps\n                </a>\n              </td>\n              <th scope='row'> &nbsp; -&gt; And insert the API that you created here -&gt; &nbsp;</th>\n            </tr>\n            &nbsp; &nbsp;\n            <form className='d-flex'>\n              <input\n                onChange={(e) => setTermAPI(e.target.value)}\n                className='form-control form-control-lg'\n                type='text'\n                placeholder='Your API...'\n              />\n              <button onClick={insertAPI} className='btn btn-info my-2 my-sm-0' >\n                Insert\n              </button>\n            </form>\n          </div>\n        </div>\n      </nav>\n\n      {homeFlag ? home : null}\n      {favFlag ? fav : null}\n    </div>\n  );\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}